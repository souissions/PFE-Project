# state.py
from typing import List, Optional, TypedDict, Dict, Any
import pandas as pd

class AgentState(TypedDict):
    """
    
    This dictionary structure holds all the information the agent needs
    to track throughout its execution flow for a given user request.
    Defines the state passed between nodes in the LangGraph.
    """
    # Core Conversation Input
    conversation_history: List[Dict[str, Any]] # Can now contain multimodal messages
    user_query: str # The latest user query text from the input

    # --- ADDED for Multimodal Input ---
    uploaded_image_bytes: Optional[bytes] # Raw bytes of the image uploaded THIS turn
    image_prompt_text: Optional[str] # The text entered alongside the image upload THIS turn
    # --- END ADDED ---

    # Internal State & Routing
    user_intent: Optional[str] # Classified intent: 'SYMPTOM_TRIAGE', 'MEDICAL_INFORMATION_REQUEST', 'OFF_TOPIC'
    accumulated_symptoms: str # Concatenated string of relevant TEXT symptoms for triage
    is_relevant: Optional[bool] # Result of relevance check for triage conversation
    loop_count: int # Counter for refinement loops to prevent infinite cycles

    # Data Processed During Execution
    rag_context: Optional[str] # Text context retrieved from vector store
    initial_explanation: Optional[str] # First draft of the specialist explanation generated by LLM
    evaluator_critique: Optional[str] # Feedback string from the explanation evaluator LLM

    # Final Outputs Generated by the Agent
    final_explanation: Optional[str] # The final, accepted/refined explanation text
    recommended_specialist: Optional[str] # The extracted name of the specialist
    doctor_recommendations: Optional[Any] # Using Any to avoid strict pandas dependency here, but expect DataFrame
    no_doctors_found_specialist: Optional[str] # Stores specialist name if doctor lookup failed or returned empty
    final_response: Optional[str] # The primary text response compiled for the user for the current turn